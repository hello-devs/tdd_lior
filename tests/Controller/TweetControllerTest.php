<?php

namespace Test\Controller;

use PHPUnit\Framework\TestCase;
use Tweeter\Controller\TweetController;
use Tweeter\Model\TweetModel;
use \PDO;

class TweetControllerTest extends TestCase
{
    protected PDO $pdo;
    protected  TweetController $tweetController;
    Protected TweetModel $tweetModel;

    protected function  setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->pdo = new PDO('mysql:host=localhost;dbname=tdd_lior;charset=utf8', 'root', '', [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
        ]);
        $this->tweetModel = new TweetModel($this->pdo);
        $this->tweetController = new TweetController($this->tweetModel);

        $_POST = [];

    }

    /** @test */
    public function user_can_save_tweet()
    {
        //setup: we want a empty database
        $this->pdo->exec('DELETE FROM tweet');

        //Have Got POST Request to /tweet.php
        //Have Got parameters "content" and "author"
        $_POST['author'] = 'Dan';
        $_POST['content'] = 'My first Tweet';

        //Controller manage request
        $response = $this->tweetController->saveTweet();

        //We expect to be redirected to /
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertArrayHasKey('Location', $response->getHeaders(), "Response headers have'nt 'Location' key");
        $this->assertEquals('/', $response->getHeaders()['Location']);

        //We expect tweet to be saved in DB
        $result = $this->pdo->query('SELECT t.* FROM tweet as t');
        $this->assertEquals(1, $result->rowCount());

        //We expect tweet "author" et "content" match with given parameters
        $data = $result->fetch();
        $this->assertEquals('Dan', $data['author']);
        $this->assertEquals('My first Tweet', $data['content']);
    }
    
    public function test_it_cant_save_tweet_without_author()
    {
        //When got content but not author
        $_POST['content'] = "test tweet";
        $response = $this->tweetController->saveTweet();

        //We expect response status 400
        $this->assertEquals(400, $response->getStatusCode());
        //We expect response content: "Author is missing"
        $this->assertEquals("author is missing",$response->getContent());
    }

    public function test_it_cant_save_tweet_without_content()
    {
        //When got content but not content
        $_POST['author'] = "luc";
        $response = $this->tweetController->saveTweet();

        //We expect response status 400
        $this->assertEquals(400, $response->getStatusCode());
        //We expect response content: "content is missing"
        $this->assertEquals("content is missing",$response->getContent());
    }

    public function test_it_cant_save_tweet_with_no_content_and_no_author()
    {
        $response = $this->tweetController->saveTweet();

        //We expect response status 400
        $this->assertEquals(400, $response->getStatusCode());
        //We expect response content: "content and author are missing"
        $this->assertEquals("Fields author, content are missing",$response->getContent());
    }

}
